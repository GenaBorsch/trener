import { NextResponse } from 'next/server';
import { drizzle } from 'drizzle-orm/neon-http';
import { neon } from '@neondatabase/serverless';
import * as schema from '../../../lib/db/schema';
import bcrypt from 'bcryptjs';

export async function POST() {
  try {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è production –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º NETLIFY_DATABASE_URL –¥–ª—è production
    const databaseUrl = process.env.NETLIFY_DATABASE_URL;
    
    if (!databaseUrl) {
      return NextResponse.json({ 
        error: 'NETLIFY_DATABASE_URL –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      }, { status: 500 });
    }
    
    console.log('üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    const sql = neon(databaseUrl);
    const db = drizzle(sql, { schema });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('üë• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const existingUsers = await db.select().from(schema.users);
    
    if (existingUsers.length > 0) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${existingUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`);
      return NextResponse.json({ 
        message: `–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ù–∞–π–¥–µ–Ω–æ ${existingUsers.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`,
        users: existingUsers.map(u => ({ email: u.email, name: u.name }))
      });
    }
    
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const hashedPassword = await bcrypt.hash('password123', 10);
    
    const [newUser] = await db.insert(schema.users).values({
      email: 'trainer@powerlift.com',
      name: '–¢—Ä–µ–Ω–µ—Ä',
      password: hashedPassword,
    }).returning();
    
    console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: ${newUser.email}`);
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    console.log('üèãÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...');
    const exercises = [
      { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', category: 'squat' },
      { name: '–ñ–∏–º –ª–µ–∂–∞', category: 'bench' },
      { name: '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞', category: 'deadlift' },
      { name: '–ñ–∏–º —Å—Ç–æ—è', category: 'press' },
      { name: '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è', category: 'pull' },
      { name: '–û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö', category: 'dip' },
    ];
    
    const createdExercises = [];
    for (const exercise of exercises) {
      const [created] = await db.insert(schema.exercises).values(exercise).returning();
      createdExercises.push(created);
      console.log(`   ‚úÖ ${exercise.name}`);
    }
    
    console.log('üéâ Production –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
    
    return NextResponse.json({
      message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!',
      user: { email: newUser.email, name: newUser.name },
      exercises: createdExercises.length,
      credentials: {
        email: 'trainer@powerlift.com',
        password: 'password123'
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    return NextResponse.json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 });
  }
}
