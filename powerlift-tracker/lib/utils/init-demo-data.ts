// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ
export function initializeDemoData() {
  const storage = (global as any).__inMemoryStorage;
  
  if (!storage) {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏');
    return;
  }

  // –ï—Å–ª–∏ –ø–ª–∞–Ω—ã —É–∂–µ –µ—Å—Ç—å, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
  if (storage.plans && storage.plans.length > 0) {
    return;
  }

  console.log('üìã –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫...');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
  if (!storage.plans) storage.plans = [];
  if (!storage.planExercises) storage.planExercises = [];
  if (!storage.workoutLogs) storage.workoutLogs = [];
  if (!storage.exerciseLogs) storage.exerciseLogs = [];

  const athletes = storage.athletes || [];
  const exercises = storage.exercises || [];

  // –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ç–ª–µ—Ç–∞
  for (const athlete of athletes) {
    // –°–æ–∑–¥–∞–µ–º 4 –Ω–µ–¥–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    for (let week = 1; week <= 4; week++) {
      // 3 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –Ω–µ–¥–µ–ª—é
      for (let workout = 1; workout <= 3; workout++) {
        const planId = `plan-${athlete.id}-w${week}-t${workout}`;
        const isTestWeek = week === 4; // 4-—è –Ω–µ–¥–µ–ª—è - –ø—Ä–æ—Ö–æ–¥–∫–∞
        
        const plan = {
          id: planId,
          athleteId: athlete.id,
          week,
          workoutNumber: workout,
          date: new Date(2024, 9, (week - 1) * 7 + workout * 2), // –û–∫—Ç—è–±—Ä—å 2024
          type: isTestWeek ? 'test' : 'regular',
          notes: isTestWeek ? '–ü—Ä–æ—Ö–æ–¥–∫–∞ - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –≤–µ—Å–∞' : undefined,
          createdAt: new Date(),
          updatedAt: new Date(),
        };

        storage.plans.push(plan);

        // –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ø–ª–∞–Ω –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        let exerciseIds: string[] = [];
        let exerciseParams: Array<{weight: number, reps: number, sets: number}> = [];

        if (workout === 1) { // –î–µ–Ω—å 1: –ù–æ–≥–∏ + –ì—Ä—É–¥—å
          exerciseIds = [
            exercises.find(e => e.name === '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π')?.id,
            exercises.find(e => e.name === '–ñ–∏–º –ª–µ–∂–∞')?.id,
            exercises.find(e => e.name === '–ñ–∏–º –Ω–æ–≥–∞–º–∏')?.id,
            exercises.find(e => e.name === '–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª–µ–∂–∞')?.id,
          ].filter(Boolean);

          if (isTestWeek) {
            // –ü—Ä–æ—Ö–æ–¥–∫–∞ - —Ä–∞–±–æ—Ç–∞ –Ω–∞ –º–∞–∫—Å–∏–º—É–º
            exerciseParams = [
              { weight: Math.round((athlete.squatPM || 100) * 0.9), reps: 3, sets: 1 },
              { weight: Math.round((athlete.benchPM || 70) * 0.9), reps: 3, sets: 1 },
              { weight: Math.round((athlete.squatPM || 100) * 0.7), reps: 8, sets: 3 },
              { weight: Math.round((athlete.benchPM || 70) * 0.7), reps: 8, sets: 3 },
            ];
          } else {
            // –û–±—ã—á–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞
            const intensity = 0.7 + (week - 1) * 0.05; // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –ø–æ –Ω–µ–¥–µ–ª—è–º
            exerciseParams = [
              { weight: Math.round((athlete.squatPM || 100) * intensity), reps: 5, sets: 4 },
              { weight: Math.round((athlete.benchPM || 70) * intensity), reps: 5, sets: 4 },
              { weight: Math.round((athlete.squatPM || 100) * 0.6), reps: 10, sets: 3 },
              { weight: Math.round((athlete.benchPM || 70) * 0.6), reps: 10, sets: 3 },
            ];
          }
        } else if (workout === 2) { // –î–µ–Ω—å 2: –°–ø–∏–Ω–∞ + –ü–ª–µ—á–∏
          exerciseIds = [
            exercises.find(e => e.name === '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞')?.id,
            exercises.find(e => e.name === '–ñ–∏–º —à—Ç–∞–Ω–≥–∏ —Å—Ç–æ—è')?.id,
            exercises.find(e => e.name === '–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ')?.id,
            exercises.find(e => e.name === '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è')?.id,
          ].filter(Boolean);

          if (isTestWeek) {
            exerciseParams = [
              { weight: Math.round((athlete.deadliftPM || 120) * 0.9), reps: 3, sets: 1 },
              { weight: Math.round((athlete.benchPM || 70) * 0.6), reps: 5, sets: 3 },
              { weight: Math.round((athlete.deadliftPM || 120) * 0.6), reps: 8, sets: 3 },
              { weight: 0, reps: 8, sets: 3 }, // –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è —Å –≤–µ—Å–æ–º —Ç–µ–ª–∞
            ];
          } else {
            const intensity = 0.7 + (week - 1) * 0.05;
            exerciseParams = [
              { weight: Math.round((athlete.deadliftPM || 120) * intensity), reps: 5, sets: 3 },
              { weight: Math.round((athlete.benchPM || 70) * 0.5), reps: 8, sets: 4 },
              { weight: Math.round((athlete.deadliftPM || 120) * 0.6), reps: 8, sets: 3 },
              { weight: 0, reps: 10, sets: 3 },
            ];
          }
        } else { // –î–µ–Ω—å 3: –†—É–∫–∏ + –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
          exerciseIds = [
            exercises.find(e => e.name === '–ñ–∏–º —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º')?.id,
            exercises.find(e => e.name === '–ü–æ–¥—ä–µ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±–∏—Ü–µ–ø—Å')?.id,
            exercises.find(e => e.name === '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º')?.id,
            exercises.find(e => e.name === '–ú–æ–ª–æ—Ç–∫–∏ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏')?.id,
          ].filter(Boolean);

          const baseWeight = (athlete.benchPM || 70) * 0.6;
          exerciseParams = [
            { weight: Math.round(baseWeight), reps: 8, sets: 4 },
            { weight: Math.round(baseWeight * 0.5), reps: 10, sets: 3 },
            { weight: Math.round(baseWeight * 0.4), reps: 12, sets: 3 },
            { weight: Math.round(baseWeight * 0.3), reps: 12, sets: 3 },
          ];
        }

        // –î–æ–±–∞–≤–ª—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –ø–ª–∞–Ω
        exerciseIds.forEach((exerciseId, index) => {
          if (exerciseId && exerciseParams[index]) {
            const planExercise = {
              id: `pe-${planId}-${index}`,
              planId,
              exerciseId,
              orderIndex: index,
              targetWeight: exerciseParams[index].weight || undefined,
              targetReps: exerciseParams[index].reps,
              targetSets: exerciseParams[index].sets,
              notes: undefined,
              createdAt: new Date(),
            };
            storage.planExercises.push(planExercise);
          }
        });

        // –°–æ–∑–¥–∞–µ–º –ª–æ–≥–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –Ω–µ–¥–µ–ª—å)
        if (week <= 3) {
          const workoutLogId = `wl-${planId}`;
          const workoutLog = {
            id: workoutLogId,
            planId,
            athleteId: athlete.id,
            date: new Date(2024, 9, (week - 1) * 7 + workout * 2 + 1), // –ù–∞ –¥–µ–Ω—å –ø–æ–∑–∂–µ –ø–ª–∞–Ω–∞
            comment: `–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞. ${isTestWeek ? '–ü—Ä–æ—Ö–æ–¥–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!' : '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!'}`,
            createdAt: new Date(),
          };
          storage.workoutLogs.push(workoutLog);

          // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
          exerciseIds.forEach((exerciseId, index) => {
            if (exerciseId && exerciseParams[index]) {
              const targetParams = exerciseParams[index];
              // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (–Ω–µ–º–Ω–æ–≥–æ –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –æ—Ç –ø–ª–∞–Ω–∞)
              const actualWeight = targetParams.weight ? 
                targetParams.weight + (Math.random() > 0.5 ? 2.5 : -2.5) : 
                undefined;
              const actualReps = targetParams.reps + (Math.random() > 0.7 ? 1 : 0);
              const actualSets = targetParams.sets;

              const exerciseLog = {
                id: `el-${workoutLogId}-${index}`,
                workoutLogId,
                planExerciseId: `pe-${planId}-${index}`,
                exerciseId,
                actualWeight,
                actualReps,
                actualSets,
                notes: Math.random() > 0.8 ? '–õ–µ–≥–∫–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' : undefined,
                createdAt: new Date(),
              };
              storage.exerciseLogs.push(exerciseLog);
            }
          });
        }
      }
    }
  }

  console.log('‚úÖ –ü–ª–∞–Ω—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã:', {
    plans: storage.plans.length,
    planExercises: storage.planExercises.length,
    workoutLogs: storage.workoutLogs.length,
    exerciseLogs: storage.exerciseLogs.length,
  });
}
