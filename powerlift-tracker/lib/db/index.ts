// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ serverless –æ–∫—Ä—É–∂–µ–Ω–∏–∏
// –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

interface User {
  id: string;
  email: string;
  passwordHash: string;
  name: string;
  createdAt: Date;
}

interface Athlete {
  id: string;
  name: string;
  birthDate: string;
  weight: number;
  height: number;
  userId: string;
  createdAt: Date;
}

interface Exercise {
  id: string;
  name: string;
  category: string;
  description?: string;
  createdAt: Date;
}

// In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
const inMemoryStorage = {
  users: [] as User[],
  athletes: [] as Athlete[],
  exercises: [] as Exercise[],
};

// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
if (inMemoryStorage.users.length === 0) {
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–∑ QUICKSTART.md
  inMemoryStorage.users.push({
    id: 'trainer-user',
    email: 'trainer@powerlift.com',
    passwordHash: '$2b$10$sN..dmD.16HSM6rcKaYANuY8xFi9A5GHfHy60Y78cGBF563pTS6mC', // password123
    name: '–¢—Ä–µ–Ω–µ—Ä',
    createdAt: new Date(),
  });

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–µ–º–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  inMemoryStorage.users.push({
    id: 'demo-user-1',
    email: 'admin@example.com',
    passwordHash: '$2b$10$SsdFUqeNzN17pr31tA1BPu0cjxyrC/RqP4lyLMldd4pw.akMOC5Vy', // password
    name: '–î–µ–º–æ –¢—Ä–µ–Ω–µ—Ä',
    createdAt: new Date(),
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
  const basicExercises = [
    { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è', category: '–ù–æ–≥–∏', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≥' },
    { name: '–ñ–∏–º –ª–µ–∂–∞', category: '–ì—Ä—É–¥—å', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–¥–∏' },
    { name: '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞', category: '–°–ø–∏–Ω–∞', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏–Ω—ã' },
    { name: '–ñ–∏–º —Å—Ç–æ—è', category: '–ü–ª–µ—á–∏', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –ø–ª–µ—á' },
    { name: '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è', category: '–°–ø–∏–Ω–∞', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º' },
  ];

  basicExercises.forEach((exercise, index) => {
    inMemoryStorage.exercises.push({
      id: `exercise-${index + 1}`,
      name: exercise.name,
      category: exercise.category,
      description: exercise.description,
      createdAt: new Date(),
    });
  });
}

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Drizzle ORM API
export const db = {
  query: {
    users: {
      findFirst: async (options: any) => {
        console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', options);
        console.log('üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞–º—è—Ç–∏:', inMemoryStorage.users.map(u => ({ id: u.id, email: u.email })));
        
        if (!options || !options.where) {
          return null;
        }
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —É—Å–ª–æ–≤–∏–π where
        let email = null;
        if (typeof options.where === 'function') {
          // –ï—Å–ª–∏ where - —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, eq(users.email, email))
          // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ email –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
          const whereStr = options.where.toString();
          console.log('üîß Where function:', whereStr);
          return null; // –ü–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        } else if (options.where.email) {
          email = options.where.email;
        } else if (options.where._value) {
          email = options.where._value;
        }
        
        console.log('üìß –ò—â–µ–º email:', email);
        
        const user = inMemoryStorage.users.find(u => u.email === email);
        console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user ? { id: user.id, email: user.email } : null);
        
        return user || null;
      },
    },
    athletes: {
      findMany: async (options?: any) => {
        return inMemoryStorage.athletes;
      },
    },
    exercises: {
      findMany: async (options?: any) => {
        return inMemoryStorage.exercises;
      },
    },
  },
  select: () => ({
    from: (table: any) => ({
      where: (condition: any) => inMemoryStorage.users,
    }),
  }),
  insert: (table: any) => ({
    values: (data: any) => ({
      returning: () => {
        if (table === 'users') {
          const newUser = { ...data, id: `user-${Date.now()}`, createdAt: new Date() };
          inMemoryStorage.users.push(newUser);
          return [newUser];
        }
        if (table === 'athletes') {
          const newAthlete = { ...data, id: `athlete-${Date.now()}`, createdAt: new Date() };
          inMemoryStorage.athletes.push(newAthlete);
          return [newAthlete];
        }
        return [data];
      },
    }),
  }),
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∏
export const users = 'users';
export const athletes = 'athletes';
export const exercises = 'exercises';
export const plans = 'plans';
export const logs = 'logs';