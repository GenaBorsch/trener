// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ serverless –æ–∫—Ä—É–∂–µ–Ω–∏–∏
// –í production –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω–æ–µ in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

interface User {
  id: string;
  email: string;
  passwordHash: string;
  name: string;
  createdAt: Date;
}

interface Athlete {
  id: string;
  name: string;
  userId: string;
  squatPM?: number;
  benchPM?: number;
  deadliftPM?: number;
  pmDate?: Date;
  pmHistory?: Array<{
    date: string;
    squat?: number;
    bench?: number;
    deadlift?: number;
  }>;
  roundingStep: number;
  createdAt: Date;
  updatedAt: Date;
}

interface Exercise {
  id: string;
  name: string;
  category: string;
  description?: string;
  userId: string;
  isArchived: boolean;
  createdAt: Date;
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ in-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è serverless –æ–∫—Ä—É–∂–µ–Ω–∏—è
function getGlobalStorage() {
  if (!(global as any).__inMemoryStorage) {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–º–∏');
    
    (global as any).__inMemoryStorage = {
      users: [] as User[],
      athletes: [] as Athlete[],
      exercises: [] as Exercise[],
    };

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    (global as any).__inMemoryStorage.users.push({
      id: 'trainer-user',
      email: 'trainer@powerlift.com',
      passwordHash: '$2b$10$sN..dmD.16HSM6rcKaYANuY8xFi9A5GHfHy60Y78cGBF563pTS6mC', // password123
      name: '–¢—Ä–µ–Ω–µ—Ä',
      createdAt: new Date(),
    });

    (global as any).__inMemoryStorage.users.push({
      id: 'demo-user-1',
      email: 'admin@example.com',
      passwordHash: '$2b$10$SsdFUqeNzN17pr31tA1BPu0cjxyrC/RqP4lyLMldd4pw.akMOC5Vy', // password
      name: '–î–µ–º–æ –¢—Ä–µ–Ω–µ—Ä',
      createdAt: new Date(),
    });

    // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∞—Ç–ª–µ—Ç–æ–≤
    (global as any).__inMemoryStorage.athletes.push({
      id: 'athlete-demo-1',
      userId: 'trainer-user',
      name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
      squatPM: 150,
      benchPM: 100,
      deadliftPM: 180,
      pmDate: new Date('2024-09-15'),
      pmHistory: [
        { date: '2024-09-15', squat: 150, bench: 100, deadlift: 180 },
        { date: '2024-08-15', squat: 145, bench: 95, deadlift: 175 },
      ],
      roundingStep: 2.5,
      createdAt: new Date('2024-09-01'),
      updatedAt: new Date('2024-09-15'),
    });

    (global as any).__inMemoryStorage.athletes.push({
      id: 'athlete-demo-2',
      userId: 'trainer-user',
      name: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
      squatPM: 80,
      benchPM: 50,
      deadliftPM: 100,
      pmDate: new Date('2024-10-01'),
      pmHistory: [
        { date: '2024-10-01', squat: 80, bench: 50, deadlift: 100 },
        { date: '2024-09-01', squat: 75, bench: 45, deadlift: 95 },
      ],
      roundingStep: 2.5,
      createdAt: new Date('2024-08-15'),
      updatedAt: new Date('2024-10-01'),
    });

    (global as any).__inMemoryStorage.athletes.push({
      id: 'athlete-demo-3',
      userId: 'trainer-user',
      name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
      squatPM: 200,
      benchPM: 140,
      deadliftPM: 220,
      pmDate: new Date('2024-10-05'),
      pmHistory: [
        { date: '2024-10-05', squat: 200, bench: 140, deadlift: 220 },
        { date: '2024-09-05', squat: 195, bench: 135, deadlift: 215 },
        { date: '2024-08-05', squat: 190, bench: 130, deadlift: 210 },
      ],
      roundingStep: 2.5,
      createdAt: new Date('2024-07-20'),
      updatedAt: new Date('2024-10-05'),
    });

    (global as any).__inMemoryStorage.athletes.push({
      id: 'athlete-demo-4',
      userId: 'trainer-user',
      name: '–ï–ª–µ–Ω–∞ –í–∞—Å–∏–ª—å–µ–≤–∞',
      squatPM: 90,
      benchPM: 55,
      deadliftPM: 110,
      pmDate: new Date('2024-10-08'),
      pmHistory: [
        { date: '2024-10-08', squat: 90, bench: 55, deadlift: 110 },
      ],
      roundingStep: 2.5,
      createdAt: new Date('2024-10-01'),
      updatedAt: new Date('2024-10-08'),
    });

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    const demoExercises = [
      // –ù–æ–≥–∏
      { name: '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å–æ —à—Ç–∞–Ω–≥–æ–π', category: '–ù–æ–≥–∏', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–≤–∞–¥—Ä–∏—Ü–µ–ø—Å–æ–≤, —è–≥–æ–¥–∏—Ü –∏ –∑–∞–¥–Ω–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –±–µ–¥—Ä–∞' },
      { name: '–ñ–∏–º –Ω–æ–≥–∞–º–∏', category: '–ù–æ–≥–∏', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –º—ã—à—Ü –Ω–æ–≥' },
      { name: '–í—ã–ø–∞–¥—ã —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏', category: '–ù–æ–≥–∏', description: '–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≥ –∏ —è–≥–æ–¥–∏—Ü' },
      { name: '–†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞', category: '–ù–æ–≥–∏', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–Ω–µ–π –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ –±–µ–¥—Ä–∞ –∏ —è–≥–æ–¥–∏—Ü' },
      { name: '–ü–æ–¥—ä–µ–º—ã –Ω–∞ –Ω–æ—Å–∫–∏', category: '–ù–æ–≥–∏', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∏–∫—Ä–æ–Ω–æ–∂–Ω—ã—Ö –º—ã—à—Ü' },
      { name: '–ë–æ–ª–≥–∞—Ä—Å–∫–∏–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è', category: '–ù–æ–≥–∏', description: '–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è —Å –≤–æ–∑–≤—ã—à–µ–Ω–∏—è' },
      
      // –ì—Ä—É–¥—å
      { name: '–ñ–∏–º –ª–µ–∂–∞', category: '–ì—Ä—É–¥—å', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≥—Ä—É–¥–Ω—ã—Ö –º—ã—à—Ü' },
      { name: '–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª–µ–∂–∞', category: '–ì—Ä—É–¥—å', description: '–í–∞—Ä–∏–∞—Ü–∏—è –∂–∏–º–∞ –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–¥–Ω—ã—Ö –º—ã—à—Ü' },
      { name: '–û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö', category: '–ì—Ä—É–¥—å', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º –¥–ª—è –≥—Ä—É–¥–∏ –∏ —Ç—Ä–∏—Ü–µ–ø—Å–æ–≤' },
      { name: '–†–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π', category: '–ì—Ä—É–¥—å', description: '–ò–∑–æ–ª–∏—Ä—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≥—Ä—É–¥–Ω—ã—Ö –º—ã—à—Ü' },
      { name: '–ñ–∏–º –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π —Å–∫–∞–º—å–µ', category: '–ì—Ä—É–¥—å', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –≥—Ä—É–¥–Ω—ã—Ö –º—ã—à—Ü' },
      
      // –°–ø–∏–Ω–∞
      { name: '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞', category: '–°–ø–∏–Ω–∞', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–ª–∞, –æ—Å–æ–±–µ–Ω–Ω–æ —Å–ø–∏–Ω—ã' },
      { name: '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è', category: '–°–ø–∏–Ω–∞', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º –¥–ª—è —à–∏—Ä–æ—á–∞–π—à–∏—Ö –º—ã—à—Ü' },
      { name: '–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ', category: '–°–ø–∏–Ω–∞', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Ç–æ–ª—â–∏–Ω—ã —Å–ø–∏–Ω—ã' },
      { name: '–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞', category: '–°–ø–∏–Ω–∞', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –Ω–∞ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–µ –¥–ª—è —à–∏—Ä–æ—á–∞–π—à–∏—Ö –º—ã—à—Ü' },
      { name: '–¢—è–≥–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞', category: '–°–ø–∏–Ω–∞', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ä–µ–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Å–ø–∏–Ω—ã' },
      { name: '–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ', category: '–°–ø–∏–Ω–∞', description: '–û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Ç—è–≥–∞ –¥–ª—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏ —à–∏—Ä–æ—á–∞–π—à–∏—Ö' },
      
      // –ü–ª–µ—á–∏
      { name: '–ñ–∏–º —à—Ç–∞–Ω–≥–∏ —Å—Ç–æ—è', category: '–ü–ª–µ—á–∏', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –¥–µ–ª—å—Ç–æ–≤–∏–¥–Ω—ã—Ö –º—ã—à—Ü' },
      { name: '–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π —Å–∏–¥—è', category: '–ü–ª–µ—á–∏', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –ø–µ—Ä–µ–¥–Ω–∏—Ö –∏ —Å—Ä–µ–¥–Ω–∏—Ö –¥–µ–ª—å—Ç' },
      { name: '–†–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π –≤ —Å—Ç–æ—Ä–æ–Ω—ã', category: '–ü–ª–µ—á–∏', description: '–ò–∑–æ–ª–∏—Ä—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Å—Ä–µ–¥–Ω–∏—Ö –¥–µ–ª—å—Ç' },
      { name: '–û–±—Ä–∞—Ç–Ω–∞—è —Ä–∞–∑–≤–æ–¥–∫–∞', category: '–ü–ª–µ—á–∏', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∑–∞–¥–Ω–∏—Ö –¥–µ–ª—å—Ç–æ–≤–∏–¥–Ω—ã—Ö –º—ã—à—Ü' },
      { name: '–ü–æ–¥—ä–µ–º—ã –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π', category: '–ü–ª–µ—á–∏', description: '–ò–∑–æ–ª–∏—Ä—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –ø–µ—Ä–µ–¥–Ω–∏—Ö –¥–µ–ª—å—Ç' },
      
      // –†—É–∫–∏
      { name: '–ü–æ–¥—ä–µ–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±–∏—Ü–µ–ø—Å', category: '–†—É–∫–∏', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –±–∏—Ü–µ–ø—Å–æ–≤' },
      { name: '–ñ–∏–º —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º', category: '–†—É–∫–∏', description: '–ë–∞–∑–æ–≤–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∏—Ü–µ–ø—Å–æ–≤' },
      { name: '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º', category: '–†—É–∫–∏', description: '–ò–∑–æ–ª–∏—Ä—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∏—Ü–µ–ø—Å–æ–≤' },
      { name: '–ú–æ–ª–æ—Ç–∫–∏ —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏', category: '–†—É–∫–∏', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –±–∏—Ü–µ–ø—Å–æ–≤ –∏ –ø—Ä–µ–¥–ø–ª–µ—á–∏–π' },
      { name: '–ü–æ–¥—ä–µ–º—ã –Ω–∞ –±–∏—Ü–µ–ø—Å —Å –≥–∞–Ω—Ç–µ–ª—è–º–∏', category: '–†—É–∫–∏', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –±–∏—Ü–µ–ø—Å–æ–≤' },
      { name: '–†–∞–∑–≥–∏–±–∞–Ω–∏—è –Ω–∞ —Ç—Ä–∏—Ü–µ–ø—Å', category: '–†—É–∫–∏', description: '–ò–∑–æ–ª–∏—Ä—É—é—â–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —Ç—Ä–∏—Ü–µ–ø—Å–æ–≤' },
      
      // –ü—Ä–µ—Å—Å
      { name: '–ü–ª–∞–Ω–∫–∞', category: '–ü—Ä–µ—Å—Å', description: '–°—Ç–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∫–æ—Ä–∞' },
      { name: '–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è', category: '–ü—Ä–µ—Å—Å', description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä—è–º–æ–π –º—ã—à—Ü—ã –∂–∏–≤–æ—Ç–∞' },
      { name: '–ü–æ–¥—ä–µ–º—ã –Ω–æ–≥', category: '–ü—Ä–µ—Å—Å', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ –ø—Ä–µ—Å—Å–∞' },
      { name: '–í–µ–ª–æ—Å–∏–ø–µ–¥', category: '–ü—Ä–µ—Å—Å', description: '–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –¥–ª—è –∫–æ—Å—ã—Ö –º—ã—à—Ü –∂–∏–≤–æ—Ç–∞' },
    ];

    demoExercises.forEach((exercise, index) => {
      (global as any).__inMemoryStorage.exercises.push({
        id: `ex-demo-${index + 1}`,
        userId: 'trainer-user',
        name: exercise.name,
        category: exercise.category,
        description: exercise.description,
        isArchived: false,
        createdAt: new Date(),
      });
    });

    console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      users: (global as any).__inMemoryStorage.users.length,
      athletes: (global as any).__inMemoryStorage.athletes.length,
      exercises: (global as any).__inMemoryStorage.exercises.length,
    });
  }

  return (global as any).__inMemoryStorage;
}

// –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
const inMemoryStorage = getGlobalStorage();

// –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è Drizzle ORM
export const db = {
  query: {
    users: {
      findFirst: async (options: any) => {
        console.log('üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', options);
        console.log('üìä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞–º—è—Ç–∏:', inMemoryStorage.users.map(u => ({ id: u.id, email: u.email })));

        if (!options || !options.where) {
          return null;
        }

        // –ò–∑–≤–ª–µ–∫–∞–µ–º email –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –≤ auth.config.ts
        const email = (global as any).__currentAuthEmail;

        console.log('üìß –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π email:', email);

        const user = inMemoryStorage.users.find(u => u.email === email);
        console.log('üë§ –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', user ? { id: user.id, email: user.email } : null);

        return user || null;
      },
    },
    athletes: {
      findMany: async (options?: any) => {
        console.log('üèÉ –ü–æ–∏—Å–∫ –∞—Ç–ª–µ—Ç–æ–≤ findMany:', options);
        console.log('üèÉ –í—Å–µ–≥–æ –∞—Ç–ª–µ—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏:', inMemoryStorage.athletes.length);
        console.log('üèÉ –ê—Ç–ª–µ—Ç—ã –≤ –ø–∞–º—è—Ç–∏:', inMemoryStorage.athletes.map(a => ({ id: a.id, name: a.name, userId: a.userId })));
        let result = inMemoryStorage.athletes;
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ userId - –≤—Å–µ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≥–ª–æ–±–∞–ª—å–Ω–æ–º—É userId
        const globalUserId = (global as any).__currentUserId;
        console.log('üèÉ –ì–ª–æ–±–∞–ª—å–Ω—ã–π userId:', globalUserId);
        
        if (globalUserId) {
          result = result.filter(athlete => athlete.userId === globalUserId);
          console.log('üèÉ –ê—Ç–ª–µ—Ç—ã –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ userId:', result.map(a => ({ id: a.id, name: a.name, userId: a.userId })));
        } else {
          console.log('üèÉ –ù–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ userId, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ—Ö –∞—Ç–ª–µ—Ç–æ–≤');
        }
        
        console.log('üèÉ –ù–∞–π–¥–µ–Ω–æ –∞—Ç–ª–µ—Ç–æ–≤:', result.length);
        return result;
      },
      findFirst: async (options?: any) => {
        console.log('üèÉ –ü–æ–∏—Å–∫ –∞—Ç–ª–µ—Ç–∞ findFirst:', options);
        
        // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        const globalUserId = (global as any).__currentUserId;
        const globalAthleteId = (global as any).__currentAthleteId;
        
        let athlete = null;
        
        if (globalAthleteId) {
          athlete = inMemoryStorage.athletes.find(a => 
            a.id === globalAthleteId && 
            (!globalUserId || a.userId === globalUserId)
          );
          console.log('üèÉ –ü–æ–∏—Å–∫ –ø–æ ID:', globalAthleteId, '–Ω–∞–π–¥–µ–Ω:', !!athlete);
          // –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
          delete (global as any).__currentAthleteId;
        }
        
        // –ù–ï —É–¥–∞–ª—è–µ–º __currentUserId, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        
        console.log('üèÉ –ù–∞–π–¥–µ–Ω –∞—Ç–ª–µ—Ç:', athlete ? { id: athlete.id, name: athlete.name } : null);
        return athlete;
      },
    },
    exercises: {
      findMany: async (options?: any) => {
        console.log('üí™ –ü–æ–∏—Å–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π findMany:', options);
        let result = inMemoryStorage.exercises;
        
        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ userId –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ
        const globalUserId = (global as any).__currentUserId;
        if (globalUserId) {
          result = result.filter(exercise => exercise.userId === globalUserId);
        }
        
        console.log('üí™ –ù–∞–π–¥–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π:', result.length);
        console.log('üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:', result.map(e => ({ id: e.id, name: e.name, userId: e.userId })));
        return result;
      },
    },
  },
  select: () => ({
    from: (table: any) => ({
      where: (condition: any) => ({
        execute: async () => {
          if (table === 'users') {
            // –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è select from users where
            const email = (global as any).__currentAuthEmail;
            return inMemoryStorage.users.filter(u => u.email === email);
          }
          return [];
        },
      }),
      execute: async () => {
        if (table === 'users') return inMemoryStorage.users;
        if (table === 'athletes') return inMemoryStorage.athletes;
        if (table === 'exercises') return inMemoryStorage.exercises;
        return [];
      },
    }),
  }),
  insert: (table: any) => ({
    values: (data: any) => ({
      returning: () => {
        console.log('üíæ –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É:', table, data);
        
        if (table === 'users') {
          const newUser = { ...data, id: `user-${Date.now()}`, createdAt: new Date() };
          inMemoryStorage.users.push(newUser);
          console.log('üë§ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', newUser.id);
          return [newUser];
        }
        if (table === 'athletes') {
          const newAthlete = { 
            ...data, 
            id: `athlete-${Date.now()}`, 
            createdAt: new Date(),
            updatedAt: new Date()
          };
          inMemoryStorage.athletes.push(newAthlete);
          console.log('üèÉ –°–æ–∑–¥–∞–Ω –∞—Ç–ª–µ—Ç:', newAthlete.id, newAthlete.name);
          return [newAthlete];
        }
        if (table === 'exercises') {
          const newExercise = { 
            ...data, 
            id: `exercise-${Date.now()}`, 
            createdAt: new Date()
          };
          inMemoryStorage.exercises.push(newExercise);
          console.log('üí™ –°–æ–∑–¥–∞–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ:', newExercise.id, newExercise.name);
          return [newExercise];
        }
        return [data];
      },
    }),
  }),
  update: (table: any) => ({
    set: (data: any) => ({
      where: (condition: any) => ({
        returning: () => {
          console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ:', table, data);
          
          if (table === 'athletes') {
            const athleteId = (global as any).__currentAthleteId;
            const userId = (global as any).__currentUserId;
            
            if (athleteId) {
              const athleteIndex = inMemoryStorage.athletes.findIndex(a => 
                a.id === athleteId && (!userId || a.userId === userId)
              );
              
              if (athleteIndex !== -1) {
                inMemoryStorage.athletes[athleteIndex] = {
                  ...inMemoryStorage.athletes[athleteIndex],
                  ...data,
                  updatedAt: new Date()
                };
                console.log('üèÉ –û–±–Ω–æ–≤–ª–µ–Ω –∞—Ç–ª–µ—Ç:', athleteId);
                return [inMemoryStorage.athletes[athleteIndex]];
              }
            }
          }
          
          console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å');
          return [];
        },
      }),
    }),
  }),
  delete: (table: any) => ({
    where: (condition: any) => {
      console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:', table);
      
      if (table === 'athletes') {
        const athleteId = (global as any).__currentAthleteId;
        const userId = (global as any).__currentUserId;
        
        if (athleteId) {
          const athleteIndex = inMemoryStorage.athletes.findIndex(a => 
            a.id === athleteId && (!userId || a.userId === userId)
          );
          
          if (athleteIndex !== -1) {
            inMemoryStorage.athletes.splice(athleteIndex, 1);
            console.log('üèÉ –£–¥–∞–ª–µ–Ω –∞—Ç–ª–µ—Ç:', athleteId);
            return { success: true };
          }
        }
      }
      
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å');
      return { success: false };
    },
  }),
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è eq
  eq: (column: any, value: any) => ({ _column: column, _value: value }),
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∏
export const users = 'users';
export const athletes = 'athletes';
export const exercises = 'exercises';
export const plans = 'plans';
export const logs = 'logs';